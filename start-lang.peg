// Language Nodes

{
  var handle = require('start-lib').handle;

  function mixin(object, properties) {
    Object.keys(properties).forEach(function(prop) {
      object[prop] = properties[prop];
    });
  }

  function Node() {}

  Node.extend = function(options) {
    var delegate = options.constructor,
        ctor = function() {
          // grab the info about where we are in the source
          this._text = text();
          this._offset = offset();
          this._line = line();
          this._column = column();

          // copy from proto so we can inspect it
          this._node = this.node;

          delegate.apply(this, arguments);
        };

    ctor.prototype = Object.create(Node.prototype);
    options.constructor = ctor;
    mixin(ctor.prototype, options);
    return ctor;
  };

  var Statements = Node.extend({
    node: 'statements',

    constructor: function(stmts) {
      this.stmts = stmts || [];
    }
  });

  var IfBlock = Node.extend({
    node: 'ifBlock',

    constructor: function(cond, tstmts, fstmts) {
      this.cond = cond;
      this.tstmts = tstmts;
      this.fstmts = fstmts || new Statements();
    }
  });

  var ForBlock = Node.extend({
    node: 'forBlock',

    constructor: function(name, range, stmts) {
      this.name = name;
      this.range = range;
      this.stmts = stmts;
    }
  });

  var WhileBlock = Node.extend({
    node: 'whileBlock',

    constructor: function(cond, stmts) {
      this.cond = cond;
      this.stmts = stmts;
    }
  });

  var BeginBlock = Node.extend({
    node: 'beginBlock',

    constructor: function(name, stmts) {
      this.name = name;
      this.stmts = stmts;
    }
  });

  var Funcall = Node.extend({
    node: 'funcall',

    constructor: function(target, args) {
      this.target = target;
      this.args = args || [];
    }
  });

  var Break = Node.extend({
    node: 'break'
  });

  var Next = Node.extend({
    node: 'next'
  });

  var Return = Node.extend({
    node: 'return',

    constructor: function(result) {
      this.result = result;
    }
  });

  var Variable = Node.extend({
    node: 'variable',

    constructor: function(name, index) {
      this.name = name;
    }
  });

  var Assign = Node.extend({
    node: 'assign',

    constructor: function(name, value) {
      this.name = name;
      this.value = value;
    }
  });

  var Delete = Node.extend({
    node: 'delete',

    constructor: function(name ) {
      this.name = name;
    }
  });

  var Index = Node.extend({
    node: 'index',

    constructor: function(base, index) {
      this.base = base;
      this.index = index;
    }
  });

  var AssignIndex = Node.extend({
    node: 'assignIndex',

    constructor: function(base, index, value) {
      this.base = base;
      this.index = index;
      this.value = value;
    }
  });

  var DeleteIndex = Node.extend({
    node: 'deleteIndex',

    constructor: function(base, index) {
      this.base = base;
      this.index = index;
    }
  });

  // special token to signal buildIndex that we're building a delete_index call
  var $remove = {};

  // take a base, indexes, and (optionally) a value, and construct a left-folding tree
  // that terminates in an index lookup, assignment, or deletion
  function buildIndex(base, indexes, value) {
    indexes || (indexes = []);

    var next, last = indexes.pop();

    while (next = indexes.shift()) {
      base = new Index(base, next);
    }

    if (value === undefined) {
      return new Index(base, last);
    } else if (value === $remove) {
      return new DeleteIndex(base, last);
    } else {
      return new AssignIndex(base, last, value);
    }
  }

  var Literal = Node.extend({
    node: 'literal',

    constructor: function(value) {
      this.value = value;
    }
  });

  var Comment = Node.extend({
    node: 'comment',

    constructor: function(text) {
      this.text = text;
    }
  });

  var LogicalOp = Node.extend({
    node: 'logicalOp',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    }
  });

  // take a chain of equal-precedence logical exprs and construct a left-folding tree
  function buildLogicalOp(first, rest) {
    if (rest.length == 0) {
      return first;
    } else {
      var next = rest.shift();
      return buildLogicalOp(new LogicalOp(next[0], first, next[1]), rest);
    }
  }

  var BinaryOp = Node.extend({
    node: 'binaryOp',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    }
  });

  // take a chain of equal-precedence binary exprs and construct a left-folding tree
  function buildBinaryOp(first, rest) {
    if (rest.length == 0) {
      return first;
    } else {
      var next = rest.shift();
      return buildBinaryOp(new BinaryOp(next[0], first, next[1]), rest);
    }
  }

  // same, but fold right
  function buildBinaryOpRight(rest, last) {
    if (rest.length == 0) {
      return last;
    } else {
      var next = rest.pop();
      return buildBinaryOpRight(rest, new BinaryOp(next[0], next[1], last));
    }
  }

  var UnaryOp = Node.extend({
    node: 'unaryOp',

    constructor: function(op, right) {
      this.op = op;
      this.right = right;
    }
  });
}

// Grammar

start
  = Statements

// Statements

Statements
  = EOL* stmts:Statement* {
      return new Statements(stmts);
    }

Statement
  = IfBlock
  / ForBlock
  / WhileBlock
  / BeginBlock
  / Assign
  / Delete
  / Call
  / Flow
  / Comment

IfBlock
  = __ 'if' WB __ cond:Value EOL
    tstmts:Statements
    fstmts:(
      __ 'else' EOL
      s:Statements {
        return s;
      }
    )?
    __ 'end' EOL {
      return new IfBlock(cond, tstmts, fstmts);
    }

ForBlock
  = __ 'for' WB __ sym:Symbol __ 'in' WB __ range:Value EOL
    stmts:Statements
    __ 'end' EOL {
      return new ForBlock(sym, range, stmts);
    }

WhileBlock
  = __ 'while' WB __ cond:Value EOL
    stmts:Statements
    __ 'end' EOL {
      return new WhileBlock(cond, stmts);
    }

BeginBlock
  = __ 'begin' WB __ sym:Symbol EOL
    stmts:Statements
    __ 'end' EOL {
      return new BeginBlock(sym, stmts);
    }

Assign
  = __ 'let' WB __ sym:Symbol
    indexes:(
      __ '[' __ v:Value ']' {
        return v;
      }
    )*
    __ '=' __ value:Value EOL {
      if (indexes.length == 0) {
        return new Assign(sym, value);
      } else {
        return buildIndex(new Variable(sym), indexes, value);
      }
    }

Delete
  = __ 'delete' WB __ sym:Symbol
    indexes:(
      __ '[' __ v:Value ']' {
        return v;
      }
    )* EOL {
      if (indexes.length == 0) {
        return new Delete(sym);
      } else {
        return buildIndex(new Variable(sym), indexes, $remove);
      }
    }

Call
  = __ target:(
      'call' WB __ e:IndexExpr { return e; }
      / sym:Symbol { return new Variable(sym); }
    )
    args:(
      __ v:Values? __ {
        return v;
      }
    )? EOL {
      return new Funcall(target, args);
    }

Flow
  = __ 'break' EOL {
      return new Break;
    }
  / __ 'next' EOL {
      return new Next;
    }
  / __ 'return' result:( WB __ val:Value { return val; } )? EOL {
      return new Return(result);
    }

Comment
  = __ '--' __ text:$[^\n]* EOL {
      return new Comment(text);
    }

// Values

Values
  = first:Value rest:( __ ',' __ val:Value { return val; } )* {
      return [first].concat(rest);
    }

Value
  = CondExpr
  / AddExpr

// Conditions

CondExpr
  = first:NotExpr rest:( __ op:CondOp __ e:NotExpr { return [op, e]; } )* {
      return buildLogicalOp(first, rest);
    }

CondOp
  = 'and' WB { return 'and'; }
  / 'or'  WB { return 'or';  }

NotExpr
  = 'not' WB __ comp:RelExpr {
      return new LogicalOp('not', null, comp);
    }
  / RelExpr

RelExpr
  = left:AddExpr __ op:RelOp __ right:AddExpr {
      return new BinaryOp(op, left, right);
    }
  / '(' __ cond:CondExpr __ ')' {
      return cond;
    }

RelOp
  = '='
  / '!='
  / '<='
  / '<'
  / '>='
  / '>'

// Arithmetic

AddExpr
  = first:MultExpr rest:( __ op:AddOp __ e:MultExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

AddOp
  = '+'
  / '-'

MultExpr
  = first:PowExpr rest:( __ op:MultOp __ e:PowExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

MultOp
  = '*'
  / '/'
  / '%'

PowExpr
  = rest:(e:UnaryExpr __ op:PowOp __ { return [op, e]; } )* last:UnaryExpr {
      return buildBinaryOpRight(rest, last);
    }

PowOp
  = '^'

UnaryExpr
  = op:AddOp __ num:Number {
      // handle +/- number in the parser
      return new Literal(handle(num).unaryops[op](num));
    }
  / op:AddOp __ right:CallExpr {
      return new UnaryOp(op, right);
    }
  / CallExpr

// Invocation

CallExpr
  = target:IndexExpr __ '(' __ args:Values? __ ')' {
      return new Funcall(target, args);
    }
  / IndexExpr

// Index

IndexExpr
  = sym:Symbol indexes:( __ '[' __ v:Value ']' { return v; } )* {
      if (indexes.length == 0) {
        return new Variable(sym);
      } else {
        return buildIndex(new Variable(sym), indexes);
      }
    }
  / PrimaryExpr

PrimaryExpr
  = lit:Literal {
      return new Literal(lit);
    }
  / '(' __ val:Value __ ')' {
      return val;
    }

// Data

Literal
  = None
  / Boolean
  / Number
  / String

None
  = 'none' WB { return null; }

Boolean
  = 'true'  WB { return true; }
  / 'false' WB { return false; }

Number
  = 'infinity' WB { return Infinity; }
  / num:$( Digits ( '.' Digits )? ( [eE] [-+]? Digits )? ) {
      return parseFloat(num);
    }

Digits
  = $[0-9]+

String
  = '"' chars:Char* '"' { return chars.join(''); }

Char
  = '""' { return '"'; }
  / [^"]

Symbol
  = $( !Reserved [a-z_]i [a-z0-9_]i* )

Reserved
  = 'none'     WB
  / 'true'     WB
  / 'false'    WB
  / 'infinity' WB
  / 'if'       WB
  / 'else'     WB
  / 'end'      WB
  / 'for'      WB
  / 'in'       WB
  / 'while'    WB
  / 'begin'    WB
  / 'break'    WB
  / 'next'     WB
  / 'return'   WB
  / 'let'      WB
  / 'delete'   WB
  / 'call'     WB
  / 'and'      WB
  / 'or'       WB
  / 'not'      WB

// Whitespace

WB
  = ![a-z_]i

__
  = [ \t]*

EOL
  = ( __ [\n;] )+
