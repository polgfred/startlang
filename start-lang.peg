// Language Nodes

{
  var startlib = require('./start-lib'),
      variables = {},
      procs = {},
      slice = [].slice,
      extend = function(object, properties) {
        var keys = Object.keys(properties);
        for (var i = 0; i < keys.length; ++i) {
          object[keys[i]] = properties[keys[i]];
        }
      };

  function Node() {}

  Node.extend = function(options) {
    var delegate = options.constructor,
        ctor = function() {
          // grab the info about where we are in the source
          this._text = text();
          this._offset = offset();
          this._line = line();
          this._column = column();

          // copy from proto so we can inspect it
          this._node = this.node;

          delegate.apply(this, arguments);
        };

    ctor.prototype = Object.create(Node.prototype);
    options.constructor = ctor;
    extend(ctor.prototype, options);
    return ctor;
  };

  var Statements = Node.extend({
    node: 'stmts',

    constructor: function(stmts) {
      this.stmts = stmts;
    },

    run: function() {
      this.stmts.forEach(function(stmt) {
        stmt.run();
      });
    }
  });

  var IfBlock = Node.extend({
    node: 'if',

    constructor: function(cond, tstmts, fstmts) {
      this.cond = cond;
      this.tstmts = tstmts;
      this.fstmts = fstmts;
    },

    run: function() {
      if (this.cond.run()) {
        this.tstmts.run();
      } else if (this.fstmts) {
        this.fstmts.run();
      }
    }
  });

  var ForBlock = Node.extend({
    node: 'for',

    constructor: function(name, start, end, by, stmts) {
      this.name = name;
      this.start = start;
      this.end = end;
      this.by = by;
      this.stmts = stmts;
    },

    run: function() {
      for (var i = this.start.run(); i < this.end.run(); i += (this.by ? this.by.run() : 1)) {
        variables[this.name] = i;
        this.stmts.run();
      }
    }
  });

  var BeginBlock = Node.extend({
    node: 'begin',

    constructor: function(name, stmts) {
      this.name = name;
      this.stmts = stmts;
    },

    run: function() {
      // needs to be some sort of vm callable object
      variables[this.name] = this.stmts;
    }
  });

  var FunctionCall = Node.extend({
    node: 'call',

    constructor: function(vrb, args) {
      this.vrb = vrb;
      this.args = args || [];
    },

    run: function() {
      var vrb = this.vrb.run(),
          args = this.args.map(function(arg) {
            return arg.run();
          });

      return vrb.run(args);
    }
  });

  var Assignment = Node.extend({
    node: 'let',

    constructor: function(name, indexes, value) {
      this.name = name;
      this.indexes = indexes;
      this.value = value;
    },

    run: function() {
      var value = this.value.run();

      if (this.indexes == null) {
        variables[this.name] = value;
      } else {
        if (variables[this.name]) {
          var indexes = this.indexes.map(function(index) {
            return index.run();
          });

          variables[this.name].set(indexes, value);
        }
      }
    }
  });

  var Command = Node.extend({
    node: 'cmd',

    constructor: function(name, exprs) {
      this.name = name;
      this.exprs = exprs;
    },

    run: function() {
      // we'll eventually make this polymorphic
      if (this.name == 'print') {
        if (this.exprs) {
          for (var i = 0; i < this.exprs.length; ++i) {
            console.log(this.exprs[i].run());
          }
        } else {
          console.log();
        }
      }
    }
  });

  var Comment = Node.extend({
    node: 'rem',

    constructor: function(text) {
      this.text = text;
    },

    run: function() {
    }
  });

  var Lookup = Node.extend({
    node: 'index',

    constructor: function(vrb, indexes) {
      this.vrb = vrb;
      this.indexes = indexes;
    },

    run: function() {
      var vrb = this.vrb.run(),
          indexes = this.indexes.map(function(index) {
            return index.run();
          });

      return vrb.get(indexes);
    }
  });

  var LogicalOp = Node.extend({
    node: 'logical_op',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    },

    run: function() {
      // logical ops short-circuit
      return logicalOps[this.op](this.left, this.right);
    }
  });

  var logicalOps = {
    'and': function(left, right) {
      return left.run() && right.run();
    },
    'or': function(left, right) {
      return left.run() || right.run();
    }
  };

  // take a chain of equal-precedence logical exprs and construct a left-folding tree
  function buildLogicalOp(first, rest) {
    rest || (rest = []);

    var next;
    while (next = rest.shift()) {
      first = new LogicalOp(next[0], first, next[1]);
    }

    return first;
  }

  var BinaryOp = Node.extend({
    node: 'binary_op',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    },

    run: function() {
      return binaryOps[this.op](this.left.run(), this.right.run());
    }
  });

  var binaryOps = {
    '+' : function(left, right) { return left +  right; },
    '-' : function(left, right) { return left -  right; },
    '*' : function(left, right) { return left *  right; },
    '/' : function(left, right) { return left /  right; },
    '%' : function(left, right) { return left %  right; },
    '=' : function(left, right) { return left == right; },
    '!=': function(left, right) { return left != right; },
    '<' : function(left, right) { return left <  right; },
    '<=': function(left, right) { return left <= right; },
    '>' : function(left, right) { return left >  right; },
    '>=': function(left, right) { return left >= right; }
  };

  // take a chain of equal-precedence binary exprs and construct a left-folding tree
  function buildBinaryOp(first, rest) {
    rest || (rest = []);

    var next;
    while (next = rest.shift()) {
      first = new BinaryOp(next[0], first, next[1]);
    }

    return first;
  }

  var UnaryOp = Node.extend({
    node: 'unary_op',

    constructor: function(op, right) {
      this.op = op;
      this.right = right;
    },

    run: function() {
      return unaryOps[this.op](this.right.run());
    }
  });

  var unaryOps = {
    '+' : function(right) { return + right; },
    '-' : function(right) { return - right; }
  };

  var Variable = Node.extend({
    node: 'var',

    constructor: function(name) {
      this.name = name;
    },

    run: function() {
      return startlib[this.name] || variables[this.name];
    }
  });

  var Literal = Node.extend({
    node: 'literal',

    constructor: function(value) {
      this.value = value;
    },

    run: function() {
      return this.value;
    }
  });
}

// Grammar

start
  = Statements

// Statements

Statements
  = EOL* stmts:Statement* {
      return new Statements(stmts);
    }

Statement
  = IfBlock
  / ForBlock
  / BeginBlock
  / Assignment
  / CallStatement
  / Command
  / Comment

IfBlock
  = __ 'if' __ cond:Condition EOL
    tstmts:Statements
    fstmts:(
      __ 'else' EOL
      s:Statements {
        return s;
      }
    )?
    __ 'end' EOL {
      return new IfBlock(cond, tstmts, fstmts);
    }

ForBlock
  = __ 'for' __ sym:Symbol __ '=' __ start:Value __ 'to' __ end:Value
    by:(
      __ 'by' __ val:Value {
        return e;
      }
    )?
    EOL
    stmts:Statements
    __ 'end' EOL {
      return new ForBlock(sym, start, end, by, stmts);
    }

BeginBlock
  = __ 'begin' __ sym:Symbol EOL
    stmts:Statements
    __ 'end' EOL {
      return new BeginBlock(sym, stmts);
    }

Assignment
  = __ 'let' __ sym:Symbol
    indexes:(
      __ '[' __ i:Values __ ']' {
        return i;
      }
    )?
    __ '=' __ value:Value EOL {
      return new Assignment(sym, indexes, value);
    }

CallStatement
  = __ 'call' __ vrb:Variable args:( __ '(' __ v:Values? __ ')' { return v; } )? EOL {
      return new FunctionCall(vrb, args);
    }

Command
  = __ name:CommandName __ exprs:Values? EOL {
      return new Command(name, exprs);
    }

CommandName
  = 'print'
  / 'input'

Comment
  = __ '//' __ text:$[^\n]* EOL {
    return new Comment(text);
  }

// Conditions

Condition
  = first:Comparison rest:( __ op:BoolOp __ comp:Comparison { return [op, comp]; } )* {
      return buildLogicalOp(first, rest);
    }

BoolOp
  = 'and'
  / 'or'

Comparison
  = left:Value __ op:RelOp __ right:Value {
      return new BinaryOp(op, left, right);
    }
  / '(' __ cond:Condition __ ')' {
      return cond;
    }

RelOp
  = '='
  / '!='
  / '<='
  / '<'
  / '>='
  / '>'

// Values

Values
  = first:Value rest:( __ ',' __ val:Value { return val; } )* {
      return [first].concat(rest);
    }

Value
  = AddExpr

AddExpr
  = first:MultExpr rest:( __ op:AddOp __ e:MultExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

AddOp
  = '+'
  / '-'

MultExpr
  = first:UnaryExpr rest:( __ op:MultOp __ e:UnaryExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

MultOp
  = '*'
  / '/'
  / '%'

UnaryExpr
  // handle unary literals inline
  = op:AddOp __ right:Literal {
      right.value = unaryOps[op](right.value);
      return right;
    }
  / op:AddOp __ right:CallExpr {
      return new UnaryOp(op, right);
    }
  / CallExpr

CallExpr
  = vrb:Variable __ '(' __ args:Values? __ ')' {
      return new FunctionCall(vrb, args);
    }
  / vrb:Variable __ '[' __ indexes:Values __ ']' {
      return new Lookup(vrb, indexes);
    }
  / PrimaryExpr

PrimaryExpr
  = Literal
  / Variable
  / '(' __ val:Value __ ')' {
      return val;
    }

// Data

Variable
  = sym:Symbol { return new Variable(sym); }

Symbol
  = $( [a-z_] [a-z0-9_]* )

Literal
  = lit:( Number / String ) { return new Literal(lit); }

Number
  = 'NaN' { return NaN; }
  / 'Infinity' { return Infinity; }
  / num:$( Digits ( '.' Digits )? ( [eE] [-+]? Digits )? ) {
      return parseFloat(num);
    }

Digits
  = $[0-9]+

String
  = '"' chars:Char* '"' { return chars.join(''); }

Char
  = '""' { return '"'; }
  / [^"]

// Whitespace
__
  = [ \t]*

EOL
  = ( __ [\n] )+
