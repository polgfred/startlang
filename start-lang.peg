// Language Nodes

{
  var asap = require('asap'),
      handle = require('start-lib')._handle;

  function mixin(object, properties) {
    Object.keys(properties).forEach(function(prop) {
      object[prop] = properties[prop];
    });
  }

  function Node() {}

  Node.extend = function(options) {
    var delegate = options.constructor,
        ctor = function() {
          // grab the info about where we are in the source
          this._text = text();
          this._offset = offset();
          this._line = line();
          this._column = column();

          // copy from proto so we can inspect it
          this._node = this.node;

          delegate.apply(this, arguments);
        };

    ctor.prototype = Object.create(Node.prototype);
    options.constructor = ctor;
    mixin(ctor.prototype, options);
    return ctor;
  };

  // these are hooks where we can determine how to proceed:
  //  - immediately with asap
  //  - broadcast an update to the UI before proceeding
  //  - stop at a breakpoint and resume
  //  - etc.
  Node.prototype.run_a = function(ctx, done) {
    asap(this.run.bind(this, ctx, done));
  };

  Node.prototype.eval_a = function(ctx, done) {
    asap(this.evaluate.bind(this, ctx, done));
  };

  var Statements = Node.extend({
    node: 'statements',

    constructor: function(stmts) {
      this.stmts = stmts || [];
    },

    run: function(ctx, done) {
      var _this = this;
      (function loop(i) {
        if (i < _this.stmts.length) {
          _this.stmts[i].run_a(ctx, function() {
            loop(i + 1);
          });
        } else {
          done();
        }
      })(0);
    }
  });

  var IfBlock = Node.extend({
    node: 'if_block',

    constructor: function(cond, tstmts, fstmts) {
      this.cond = cond;
      this.tstmts = tstmts;
      this.fstmts = fstmts || new Statements();
    },

    run: function(ctx, done) {
      var _this = this;
      _this.cond.eval_a(ctx, function(cres) {
        if (cres) {
          _this.tstmts.run_a(ctx, done);
        } else {
          _this.fstmts.run_a(ctx, done);
        }
      });
    }
  });

  var ForBlock = Node.extend({
    node: 'for_block',

    constructor: function(name, range, stmts) {
      this.name = name;
      this.range = range;
      this.stmts = stmts;
    },

    run: function(ctx, done) {
      var _this = this;
      _this.range.eval_a(ctx, function(rres) {
        var iter = handle(rres).enumerate(rres);
        (function loop(i) {
          if (i < iter.length) {
            ctx.set(_this.name, iter[i]);
            _this.stmts.run(ctx, function() {
              loop(i + 1);
            });
          } else {
            done();
          }
        })(0);
      });
    }
  });

  var BeginBlock = Node.extend({
    node: 'begin_block',

    constructor: function(name, stmts) {
      this.name = name;
      this.stmts = stmts;
    },

    run: function(ctx, done) {
      ctx.set(this.name, this.invoke.bind(this));
      done();
    },

    invoke: function(ctx, args, done) {
      ctx.push();
      try {
        this.stmts.run(ctx, done);
      } finally {
        ctx.pop();
      }
    }
  });

  var Funcall = Node.extend({
    node: 'funcall',

    constructor: function(target, args) {
      this.target = target;
      this.args = args || [];
    },

    run: function(ctx, done) {
      this.evaluate(ctx, done);
    },

    evaluate: function(ctx, done) {
      var _this = this, results = [];
      _this.target.eval_a(ctx, function(tres) {
        (function loop(i) {
          if (i < _this.args.length) {
            _this.args[i].eval_a(ctx, function(ares) {
              results[i] = ares;
              loop(i + 1);
            });
          } else {
            if (tres) {
              tres(ctx, results, done);
            } else if (_this.target.node == 'variable' && _this.target.name) {
              done(ctx.syscall(_this.target.name, results));
            }
          }
        })(0);
      });
    }
  });

  var Variable = Node.extend({
    node: 'variable',

    constructor: function(name, index) {
      this.name = name;
    },

    evaluate: function(ctx, done) {
      done(ctx.get(this.name));
    }
  });

  var Assignment = Node.extend({
    node: 'assignment',

    constructor: function(name, value) {
      this.name = name;
      this.value = value;
    },

    run: function(ctx, done) {
      var _this = this;
      _this.value.evaluate(ctx, function(val) {
        ctx.set(_this.name, val);
        done();
      });
    }
  });

  var Index = Node.extend({
    node: 'index',

    constructor: function(base, index) {
      this.base = base;
      this.index = index;
    },

    evaluate: function(ctx, done) {
      var _this = this;
      _this.base.evaluate(ctx, function(cres) {
        _this.index.evaluate(ctx, function(ires) {
          done(ctx.getindex(cres, ires));
        });
      });
    }
  });

  var IndexAssignment = Node.extend({
    node: 'index_assignment',

    constructor: function(base, index, value) {
      this.base = base;
      this.index = index;
      this.value = value;
    },

    run: function(ctx, done) {
      var _this = this;
      _this.base.evaluate(ctx, function(cres) {
        _this.index.evaluate(ctx, function(ires) {
          _this.value.evaluate(ctx, function(vres) {
            ctx.setindex(cres, ires, vres);
            done();
          });
        });
      });
    }
  });

  function buildIndex(base, indexes, value) {
    indexes || (indexes = []);

    var next, last = indexes.pop();

    while (next = indexes.shift()) {
      base = new Index(base, next);
    }

    if (value == null) {
      return new Index(base, last);
    } else {
      return new IndexAssignment(base, last, value);
    }
  }

  var Literal = Node.extend({
    node: 'literal',

    constructor: function(value) {
      this.value = value;
    },

    evaluate: function(ctx, done) {
      done(this.value);
    }
  });

  var Comment = Node.extend({
    node: 'comment',

    constructor: function(text) {
      this.text = text;
    },

    run: function(ctx, done) {
      done();
    }
  });

  var LogicalOp = Node.extend({
    node: 'logical_op',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    },

    evaluate: function(ctx, done) {
      // logical ops short-circuit
      logicalOps[this.op](ctx, this.left, this.right, done);
    }
  });

  var logicalOps = {
    'and': function(ctx, left, right, done) {
      left.evaluate(ctx, function(lres) {
        if (!lres) {
          done(false);
        } else {
          right.evaluate(ctx, function(rres) {
            done(!!rres);
          });
        }
      });
    },

    'or': function(ctx, left, right, done) {
      left.evaluate(ctx, function(lres) {
        if (lres) {
          done(true);
        } else {
          right.evaluate(ctx, function(rres) {
            done(!!rres);
          });
        }
      });
    },

    'not': function(ctx, left, right, done) {
      right.evaluate(ctx, function(rres) {
        done(!rres);
      });
    }
  };

  // take a chain of equal-precedence logical exprs and construct a left-folding tree
  function buildLogicalOp(first, rest) {
    if (rest.length == 0) {
      return first;
    } else {
      var next = rest.shift();
      return buildLogicalOp(new LogicalOp(next[0], first, next[1]), rest);
    }
  }

  var BinaryOp = Node.extend({
    node: 'binary_op',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    },

    evaluate: function(ctx, done) {
      var _this = this;
      _this.left.evaluate(ctx, function(lres) {
        _this.right.evaluate(ctx, function(rres) {
          done(ctx.binaryop(_this.op, lres, rres));
        });
      });
    }
  });

  // take a chain of equal-precedence binary exprs and construct a left-folding tree
  function buildBinaryOp(first, rest) {
    if (rest.length == 0) {
      return first;
    } else {
      var next = rest.shift();
      return buildBinaryOp(new BinaryOp(next[0], first, next[1]), rest);
    }
  }

  // same, but fold right
  function buildBinaryOpRight(rest, last) {
    if (rest.length == 0) {
      return last;
    } else {
      var next = rest.pop();
      return buildBinaryOpRight(rest, new BinaryOp(next[0], next[1], last));
    }
  }

  var UnaryOp = Node.extend({
    node: 'unary_op',

    constructor: function(op, right) {
      this.op = op;
      this.right = right;
    },

    evaluate: function(ctx) {
      var _this = this;
      _this.right.evaluate(ctx, function(rres) {
        done(ctx.unaryop(_this.op, rres));
      });
    }
  });
}

// Grammar

start
  = Statements

// Statements

Statements
  = EOL* stmts:Statement* {
      return new Statements(stmts);
    }

Statement
  = IfBlock
  / ForBlock
  / BeginBlock
  / Assignment
  / CallStatement
  / Comment

IfBlock
  = __ 'if' WB __ cond:Value EOL
    tstmts:Statements
    fstmts:(
      __ 'else' EOL
      s:Statements {
        return s;
      }
    )?
    __ 'end' EOL {
      return new IfBlock(cond, tstmts, fstmts);
    }

ForBlock
  = __ 'for' WB __ sym:Symbol __ 'in' WB __ range:Value EOL
    stmts:Statements
    __ 'end' EOL {
      return new ForBlock(sym, range, stmts);
    }

BeginBlock
  = __ 'begin' WB __ sym:Symbol EOL
    stmts:Statements
    __ 'end' EOL {
      return new BeginBlock(sym, stmts);
    }

Assignment
  = __ 'let' WB __ sym:Symbol
    indexes:(
      __ '[' __ v:Value ']' {
        return v;
      }
    )*
    __ '=' __ value:Value EOL {
      if (indexes.length == 0) {
        return new Assignment(sym, value);
      } else {
        return buildIndex(new Variable(sym), indexes, value);
      }
    }

CallStatement
  = __ target:(
      'call' WB __ e:IndexExpr { return e; }
      / sym:Symbol { return new Variable(sym); }
    )
    args:(
      __ v:Values? __ {
        return v;
      }
    )? EOL {
      return new Funcall(target, args);
    }

Comment
  = __ '--' __ text:$[^\n]* EOL {
    return new Comment(text);
  }

// Values

Values
  = first:Value rest:( __ ',' __ val:Value { return val; } )* {
      return [first].concat(rest);
    }

Value
  = CondExpr
  / AddExpr

// Conditions

CondExpr
  = first:NotExpr rest:( __ op:CondOp __ e:NotExpr { return [op, e]; } )* {
      return buildLogicalOp(first, rest);
    }

CondOp
  = 'and' WB { return 'and'; }
  / 'or'  WB { return 'or';  }

NotExpr
  = 'not' WB __ comp:RelExpr {
      return new LogicalOp('not', null, comp);
    }
  / RelExpr

RelExpr
  = left:AddExpr __ op:RelOp __ right:AddExpr {
      return new BinaryOp(op, left, right);
    }
  / '(' __ cond:CondExpr __ ')' {
      return cond;
    }

RelOp
  = '='
  / '!='
  / '<='
  / '<'
  / '>='
  / '>'

// Arithmetic

AddExpr
  = first:MultExpr rest:( __ op:AddOp __ e:MultExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

AddOp
  = '+'
  / '-'

MultExpr
  = first:PowExpr rest:( __ op:MultOp __ e:PowExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

MultOp
  = '*'
  / '/'
  / '%'

PowExpr
  = rest:(e:UnaryExpr __ op:PowOp __ { return [op, e]; } )* last:UnaryExpr {
      return buildBinaryOpRight(rest, last);
    }

PowOp
  = '^'

UnaryExpr
  = op:AddOp __ num:Number {
      // handle +/- number in the parser
      return new Literal(handle(num).unaryops[op](num));
    }
  / op:AddOp __ right:CallExpr {
      return new UnaryOp(op, right);
    }
  / CallExpr

// Invocation

CallExpr
  = target:IndexExpr __ '(' __ args:Values? __ ')' {
      return new Funcall(target, args);
    }
  / IndexExpr

// Index

IndexExpr
  = sym:Symbol indexes:( __ '[' __ v:Value ']' { return v; } )* {
      if (indexes.length == 0) {
        return new Variable(sym);
      } else {
        return buildIndex(new Variable(sym), indexes);
      }
    }
  / PrimaryExpr

PrimaryExpr
  = lit:Literal {
      return new Literal(lit);
    }
  / '(' __ val:Value __ ')' {
      return val;
    }

// Data

Literal
  = None
  / Boolean
  / Number
  / String

None
  = 'none' WB { return null; }

Boolean
  = 'true'  WB { return true; }
  / 'false' WB { return false; }

Number
  = 'infinity' WB { return Infinity; }
  / num:$( Digits ( '.' Digits )? ( [eE] [-+]? Digits )? ) {
      return parseFloat(num);
    }

Digits
  = $[0-9]+

String
  = '"' chars:Char* '"' { return chars.join(''); }

Char
  = '""' { return '"'; }
  / [^"]

Symbol
  = $( !Reserved [a-z_]i [a-z0-9_]i* )

Reserved
  = 'none'     WB
  / 'true'     WB
  / 'false'    WB
  / 'infinity' WB
  / 'if'       WB
  / 'else'     WB
  / 'end'      WB
  / 'for'      WB
  / 'in'       WB
  / 'begin'    WB
  / 'let'      WB
  / 'call'     WB
  / 'and'      WB
  / 'or'       WB
  / 'not'      WB

// Whitespace

WB
  = ![a-z_]i

__
  = [ \t]*

EOL
  = ( __ [\n;] )+
