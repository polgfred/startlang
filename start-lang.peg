// Language Nodes

{
  var variables = {},
      procs = {},
      slice = [].slice,
      extend = function(object, properties) {
        var keys = Object.keys(properties);
        for (var i = 0; i < keys.length; ++i) {
          object[keys[i]] = properties[keys[i]];
        }
      };

  function Node() {}

  Node.extend = function(options) {
    var delegate = options.constructor,
        ctor = function() {
          // grab the info about where we are in the source
          this._text   = text();
          this._offset = offset();
          this._line   = line();
          this._column = column();
          delegate.apply(this, arguments);
        };
    ctor.prototype = Object.create(Node.prototype);
    options.constructor = ctor;
    extend(ctor.prototype, options);
    return ctor;
  }

  var StmtsNode = Node.extend({
    constructor: function(stmts) {
      this.stmts = stmts;
    },
    run: function() {
      for (var i = 0; i < this.stmts.length; ++i) {
        this.stmts[i].run();
      }
    }
  });

  var IfNode = Node.extend({
    constructor: function(test, tstmts, fstmts) {
      this.test   = test;
      this.tstmts = tstmts;
      this.fstmts = fstmts;
    },
    run: function() {
      if (this.test.run()) {
        this.tstmts.run();
      } else {
        this.fstmts.run();
      }
    }
  });

  var ForNode = Node.extend({
    constructor: function(name, start, end, by, stmts) {
      this.name  = name;
      this.start = start;
      this.end   = end;
      this.by    = by;
      this.stmts = stmts;
    },
    run: function() {
      for (var i = this.start.run(); i < this.end.run(); i += (this.by ? this.by.run() : 1)) {
        variables[this.name] = i;
        this.stmts.run();
      }
    }
  });

  var BeginNode = Node.extend({
    constructor: function(name, stmts) {
      this.name  = name;
      this.stmts = stmts;
    },
    run: function() {
      procs[this.name] = this.stmts;
    }
  });

  var CallNode = Node.extend({
    constructor: function(name) {
      this.name = name;
    },
    run: function() {
      procs[this.name].run();
    }
  });

  var CmdNode = Node.extend({
    constructor: function(name, exprs) {
      this.name = name;
      this.exprs = exprs;
    },
    run: function() {
      // we'll eventually make this polymorphic
      if (this.name == 'print') {
        if (this.exprs) {
          for (var i = 0; i < this.exprs.length; ++i) {
            console.log(this.exprs[i].run());
          }
        } else {
          console.log();
        }
      }
    }
  });

  var LetNode = Node.extend({
    constructor: function(name, value) {
      this.name = name;
      this.value = value;
    },
    run: function() {
      variables[this.name] = this.value.run();
    }
  });

  var SymbolNode = Node.extend({
    constructor: function(name) {
      this.name = name;
    },
    run: function() {
      return this.name;
    }
  });

  var VarNode = Node.extend({
    constructor: function(name) {
      this.name = name;
    },
    run: function() {
      return variables[this.name];
    }
  });

  var ConstantNode = Node.extend({
    constructor: function(value) {
      this.value = value;
    },
    run: function() {
      return this.value;
    }
  });
}

// Grammar

start = Stmts

Stmts
  = stmts:Stmt* {
      return new StmtsNode(stmts);
    }

Stmt
  = If
  / For
  / Begin
  / Call
  / Cmd
  / Let

If
  = __ 'if' __ test:Expr EOL
    tstmts:Stmts
    __ 'else' EOL
    fstmts:Stmts
    __ 'end' EOL {
      return new IfNode(test, tstmts, fstmts);
    }

For
  = __ 'for' __ sym:Symbol __ '=' __ start:Expr __ 'to' __ end:Expr by:( __ 'by' __ by:Expr { return by; } )? EOL
    stmts:Stmts
    __ 'end' EOL {
      return new ForNode(sym, start, end, by, stmts);
    }

Begin
  = __ 'begin' __ sym:Symbol EOL
    stmts:Stmts
    __ 'end' EOL {
      return new BeginNode(sym, stmts);
    }

Call
  = __ 'call' __ sym:Symbol EOL {
      return new CallNode(sym);
    }

Cmd
  = __ name:CmdName exprs:Exprs? EOL {
      return new CmdNode(name, exprs);
    }

CmdName
  = 'print'
  / 'input'

Let
  = __ 'let' __ sym:Symbol __ '=' __ value:Expr EOL {
      return new LetNode(sym, value);
    }

Exprs
  = __ first:Expr rest:( __ ',' __ expr:Expr { return expr; } )* {
      return [first].concat(rest);
    }

Expr
  // for now
  = num:Number  { return new ConstantNode(num); }
  / str:String  { return new ConstantNode(str); }
  / sym:Symbol  { return new VarNode(sym); }

Symbol
  = first:[a-z_] rest:[a-z0-9_]* {
      return first + rest.join('');
    }

Constant
  = Number
  / String

Number
  = digits:[0-9]+ {
      return parseInt(digits.join(''), 10);
    }

String
  = '"' chars:Char* '"' {
      return chars.join('');
    }

Char
  = '""' { return '"'; }
  / [^"]

__ = [ \t]*

EOL = (__ [\r\n])+

/*
// Expressions

additive
  = left:multiplicative ws "+" ws right:additive { return left + right; }
  / left:multiplicative ws "-" ws right:additive { return left - right; }
  / multiplicative

multiplicative
  = left:primary ws "*" ws right:multiplicative { return left * right; }
  / left:primary ws "/" ws right:multiplicative { return left / right; }
  / primary

primary
  = integer
  / string
  / '(' ws a:additive ws ')' { return a; }

// Literals

__ = [ \t]+
nl = [\r\n]+

integer
  = digits:[0-9]+ { return parseInt(digits.join(''), 10); }

string
  = '"' chars:[^"]+ '"' { return chars.join(''); }

*/
