// Language Nodes

{
  var startlib = require('./start-lib'),
      handle = startlib.handle;

  function mixin(object, properties) {
    Object.keys(properties).forEach(function(prop) {
      object[prop] = properties[prop];
    });
  }

  function Node() {}

  Node.extend = function(options) {
    var delegate = options.constructor,
        ctor = function() {
          // grab the info about where we are in the source
          this._text = text();
          this._offset = offset();
          this._line = line();
          this._column = column();

          // copy from proto so we can inspect it
          this._node = this.node;

          delegate.apply(this, arguments);
        };

    ctor.prototype = Object.create(Node.prototype);
    options.constructor = ctor;
    mixin(ctor.prototype, options);
    return ctor;
  };

  var Statements = Node.extend({
    node: 'statements',

    constructor: function(stmts) {
      this.stmts = stmts;
    },

    run: function(ctx) {
      this.stmts.forEach(function(stmt) {
        stmt.run(ctx);
      });
    }
  });

  var IfBlock = Node.extend({
    node: 'if_block',

    constructor: function(cond, tstmts, fstmts) {
      this.cond = cond;
      this.tstmts = tstmts;
      this.fstmts = fstmts;
    },

    run: function(ctx) {
      if (this.cond.evaluate(ctx)) {
        this.tstmts.run(ctx);
      } else if (this.fstmts) {
        this.fstmts.run(ctx);
      }
    }
  });

  var ForBlock = Node.extend({
    node: 'for_block',

    constructor: function(name, start, end, by, stmts) {
      this.name = name;
      this.start = start;
      this.end = end;
      this.by = by;
      this.stmts = stmts;
    },

    run: function(ctx) {
      for (var i = this.start.evaluate(ctx);
            i <= this.end.evaluate(ctx);
            i += (this.by ? this.by.evaluate(ctx) : 1)) {
        ctx.set(this.name, i);
        this.stmts.run(ctx);
      }
    }
  });

  var BeginBlock = Node.extend({
    node: 'begin_block',

    constructor: function(name, stmts) {
      this.name = name;
      this.stmts = stmts;
    },

    run: function(ctx) {
      ctx.set(this.name, this.invoke.bind(this, ctx));
    },

    invoke: function(ctx, args) {
      ctx.push();
      try {
        this.stmts.run(ctx);
      } finally {
        ctx.pop();
      }
    }
  });

  var Call = Node.extend({
    node: 'call',

    constructor: function(target, args) {
      this.target = target;
      this.args = args || [];
    },

    run: function(ctx) {
      this.evaluate(ctx);
    },

    evaluate: function(ctx) {
      var func = this.target.evaluate(ctx),
          args = this.args.map(function(arg) {
            return arg.evaluate(ctx);
          });

      if (func) {
        return func(args);
      }

      if (this.target.node == 'variable') {
        return ctx.syscall(this.target.name, args);
      }
    }
  });

  var Variable = Node.extend({
    node: 'variable',

    constructor: function(name, index) {
      this.name = name;
    },

    evaluate: function(ctx) {
      return ctx.get(this.name);
    }
  });

  var Assignment = Node.extend({
    node: 'assignment',

    constructor: function(name, value) {
      this.name = name;
      this.value = value;
    },

    run: function(ctx) {
      ctx.set(this.name, this.value.evaluate(ctx));
    }
  });

  var Index = Node.extend({
    node: 'index',

    constructor: function(base, index) {
      this.base = base;
      this.index = index;
    },

    evaluate: function(ctx) {
      return ctx.getIndex(this.base.evaluate(ctx), this.index.evaluate(ctx));
    }
  });

  var IndexAssignment = Node.extend({
    node: 'index_assignment',

    constructor: function(base, index, value) {
      this.base = base;
      this.index = index;
      this.value = value;
    },

    run: function(ctx) {
      ctx.setIndex(this.base.evaluate(ctx), this.index.evaluate(ctx), this.value.evaluate(ctx));
    }
  });

  function buildIndex(base, indexes, value) {
    indexes || (indexes = []);

    var next, last = indexes.pop();

    while (next = indexes.shift()) {
      base = new Index(base, next);
    }

    if (value == null) {
      return new Index(base, last);
    } else {
      return new IndexAssignment(base, last, value);
    }
  }

  var Literal = Node.extend({
    node: 'literal',

    constructor: function(value) {
      this.value = value;
    },

    evaluate: function() {
      return this.value;
    }
  });

  var Comment = Node.extend({
    node: 'comment',

    constructor: function(text) {
      this.text = text;
    },

    run: function() {
    }
  });

  var LogicalOp = Node.extend({
    node: 'logical_op',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    },

    evaluate: function(ctx) {
      // logical ops short-circuit
      return logicalOps[this.op](ctx, this.left, this.right);
    }
  });

  var logicalOps = {
    'and': function(ctx, left, right) { return left.evaluate(ctx) && right.evaluate(ctx); },
    'or':  function(ctx, left, right) { return left.evaluate(ctx) || right.evaluate(ctx); },
    'not': function(ctx, left, right) { return ! right.evaluate(ctx); }
  };

  // take a chain of equal-precedence logical exprs and construct a left-folding tree
  function buildLogicalOp(first, rest) {
    rest || (rest = []);

    var next;

    while (next = rest.shift()) {
      first = new LogicalOp(next[0], first, next[1]);
    }

    return first;
  }

  var BinaryOp = Node.extend({
    node: 'binary_op',

    constructor: function(op, left, right) {
      this.op = op;
      this.left = left;
      this.right = right;
    },

    evaluate: function(ctx) {
      return ctx.binaryOp(this.op, this.left.evaluate(ctx), this.right.evaluate(ctx));
    }
  });

  // take a chain of equal-precedence binary exprs and construct a left-folding tree
  function buildBinaryOp(first, rest) {
    rest || (rest = []);

    var next;
    while (next = rest.shift()) {
      first = new BinaryOp(next[0], first, next[1]);
    }

    return first;
  }

  var UnaryOp = Node.extend({
    node: 'unary_op',

    constructor: function(op, right) {
      this.op = op;
      this.right = right;
    },

    evaluate: function(ctx) {
      return ctx.unaryOp(this.op, this.right.evaluate(ctx));
    }
  });
}

// Grammar

start
  = Statements

// Statements

Statements
  = EOL* stmts:Statement* {
      return new Statements(stmts);
    }

Statement
  = IfBlock
  / ForBlock
  / BeginBlock
  / Assignment
  / CallStatement
  / Comment

IfBlock
  = __ 'if' __ cond:Condition EOL
    tstmts:Statements
    fstmts:(
      __ 'else' EOL
      s:Statements {
        return s;
      }
    )?
    __ 'end' EOL {
      return new IfBlock(cond, tstmts, fstmts);
    }

ForBlock
  = __ 'for' __ sym:Symbol __ '=' __ start:Value __ 'to' __ end:Value
    by:(
      __ 'by' __ val:Value {
        return e;
      }
    )?
    EOL
    stmts:Statements
    __ 'end' EOL {
      return new ForBlock(sym, start, end, by, stmts);
    }

BeginBlock
  = __ 'begin' __ sym:Symbol EOL
    stmts:Statements
    __ 'end' EOL {
      return new BeginBlock(sym, stmts);
    }

Assignment
  = __ 'let' __ sym:Symbol
    indexes:(
      __ '[' __ v:Value ']' {
        return v;
      }
    )*
    __ '=' __ value:Value EOL {
      if (indexes.length == 0) {
        return new Assignment(sym, value);
      } else {
        return buildIndex(new Variable(sym), indexes, value);
      }
    }

CallStatement
  = __ 'call' __ target:IndexExpr
    args:(
      __ v:Values? __ {
        return v;
      }
    )? EOL {
      return new Call(target, args);
    }
  / __ sym:Symbol
    // handle a symbol as a call statement
    ! {
      return sym == 'else' || sym == 'end';
    }
    args:(
      __ v:Values? __ {
        return v;
      }
    )? EOL {
      return new Call(new Variable(sym), args);
    }

Comment
  = __ '//' __ text:$[^\n]* EOL {
    return new Comment(text);
  }

// Conditions

Condition
  = ConjExpr

ConjExpr
  = first:NotExpr rest:( __ op:ConjOp __ e:NotExpr { return [op, e]; } )* {
      return buildLogicalOp(first, rest);
    }

ConjOp
  = 'and'
  / 'or'

NotExpr
  = 'not' __ comp:Comparison {
      return new LogicalOp('not', null, comp);
    }
  / Comparison

Comparison
  = left:Value __ op:RelOp __ right:Value {
      return new BinaryOp(op, left, right);
    }
  / '(' __ cond:Condition __ ')' {
      return cond;
    }

RelOp
  = '='
  / '!='
  / '<='
  / '<'
  / '>='
  / '>'

// Values

Values
  = first:Value rest:( __ ',' __ val:Value { return val; } )* {
      return [first].concat(rest);
    }

Value
  = AddExpr

AddExpr
  = first:MultExpr rest:( __ op:AddOp __ e:MultExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

AddOp
  = '+'
  / '-'

MultExpr
  = first:UnaryExpr rest:( __ op:MultOp __ e:UnaryExpr { return [op, e]; } )* {
      return buildBinaryOp(first, rest);
    }

MultOp
  = '*'
  / '/'
  / '%'

UnaryExpr
  // handle negative numbers
  = op:AddOp __ num:Number {
      return new Literal(handle(num).unaryOp(op, num));
    }
  / op:AddOp __ right:CallExpr {
      return new UnaryOp(op, right);
    }
  / CallExpr

CallExpr
  = target:IndexExpr __ '(' __ args:Values? __ ')' {
      return new Call(target, args);
    }
  / IndexExpr

IndexExpr
  = sym:Symbol indexes:( __ '[' __ v:Value ']' { return v; } )* {
      if (indexes.length == 0) {
        return new Variable(sym);
      } else {
        return new buildIndex(new Variable(sym), indexes);
      }
    }
  / PrimaryExpr

PrimaryExpr
  = lit:Literal {
      return new Literal(lit);
    }
  / '(' __ val:Value __ ')' {
      return val;
    }

// Data

Literal
  = Number
  / String

Number
  = 'NaN' { return NaN; }
  / 'Infinity' { return Infinity; }
  / num:$( Digits ( '.' Digits )? ( [eE] [-+]? Digits )? ) {
      return parseFloat(num);
    }

Digits
  = $[0-9]+

String
  = '"' chars:Char* '"' { return chars.join(''); }

Char
  = '""' { return '"'; }
  / [^"]

Symbol
  = $( [a-z_] [a-z0-9_]* )

// Whitespace
__
  = [ \t]*

EOL
  = ( __ [\n;] )+
